#!/usr/bin/env python3

import os
import sys
import time
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
import subprocess
import nmap
import jinja2

class WebSlayer:
    def __init__(self):
        self.target = ""
        self.output_dir = "webslayer_reports"
        self.wordlist = "/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt"

    def display_logo(self):
        logo = """
 __      __      ___.    _________ .__                             
/  \    /  \ ____\_ |__  /   _____/ |  |  _____  ___.__. _________
\   \/\/   // __ \| __ \ \_____  \  |  |  \__  \<   |  |/ __ \__  \\
 \        /\  ___/| \_\ \/        \ |  |__ / __ \\___  \  ___/ / __ \_
  \__/\  /  \___  >___  /_______  / |____/(____  / ____|\___  >____  /
       \/       \/    \/        \/             \/\/         \/     \/ 
                                by oxihash
        """
        print(logo)

    def run(self):
        self.display_logo()
        self.target = input("Enter the target URL or IP: ")
        if not self.target.startswith(("http://", "https://")):
            self.target = f"http://{self.target}"

        print(f"\nInitiating WebSlayer scan on {self.target}\n")

        scan_functions = [
            self.run_dirbuster,
            self.run_nikto,
            self.run_nmap_vuln,
            self.run_waf_scan
        ]
        total_scans = len(scan_functions)

        results = {}
        with tqdm(total=100, desc="Overall Progress", bar_format="{l_bar}{bar}", position=1) as pbar:
            for i, scan_func in enumerate(scan_functions, 1):
                print(f"\nRunning {scan_func.__name__}...")
                try:
                    results[scan_func.__name__] = scan_func()
                except Exception as e:
                    results[scan_func.__name__] = f"Error: {str(e)}"
                pbar.update(100 // total_scans)
                print(f"{scan_func.__name__} completed.")

        print("\nGenerating report...")
        self.generate_report(results)

    def run_dirbuster(self):
        output_file = "dirbuster_output.txt"
        cmd = f"gobuster dir -u {self.target} -w {self.wordlist} -o {output_file}"
        subprocess.run(cmd, shell=True, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        with open(output_file, "r") as f:
            return f.read()

    def run_nikto(self):
        output_file = "nikto_output.txt"
        cmd = f"nikto -h {self.target} -output {output_file}"
        subprocess.run(cmd, shell=True, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        with open(output_file, "r") as f:
            return f.read()

    def run_nmap_vuln(self):
        nm = nmap.PortScanner()
        nm.scan(self.target, arguments="-sV --script vuln")
        return nm.csv()

    def run_waf_scan(self):
        output_file = "wafw00f_output.txt"
        cmd = f"wafw00f {self.target} -o {output_file}"
        subprocess.run(cmd, shell=True, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        with open(output_file, "r") as f:
            return f.read()

    def generate_report(self, results):
        template_str = """
# WebSlayer Scan Report

## Target: {{ target }}

## Executive Summary

This report presents the findings of a comprehensive security scan conducted on {{ target }}. The scan utilized multiple tools to assess various aspects of the target's security posture, including directory enumeration, web server vulnerabilities, network vulnerabilities, and web application firewall detection.

## Scan Results

### Directory Enumeration (Gobuster)

The following directories and files were discovered:

{{ results['run_dirbuster'] }}


### Web Server Vulnerability Scan (Nikto)

Nikto identified the following potential vulnerabilities and information:

{{ results['run_nikto'] }}


### Network Vulnerability Scan (Nmap)

Nmap discovered the following open ports, services, and potential vulnerabilities:

{{ results['run_nmap_vuln'] }}


### Web Application Firewall Detection (Wafw00f)

The WAF detection scan yielded the following results:


## Recommendations

Based on the scan results, consider implementing the following recommendations:

1. Review and secure any sensitive directories or files discovered during the directory enumeration.
2. Address the vulnerabilities identified by Nikto, prioritizing based on severity.
3. Patch any vulnerable services or systems identified by the Nmap scan.
4. If a WAF is not detected and the application is public-facing, consider implementing a WAF for additional protection.

## Conclusion

This scan provides an overview of potential security issues present in the target system. It is recommended to conduct regular security assessments and address identified vulnerabilities promptly to maintain a strong security posture.

---

Report generated by WebSlayer on {{ timestamp }}
        """

        template = jinja2.Template(template_str)
        report_content = template.render(
            target=self.target,
            results=results,
            timestamp=time.strftime("%Y-%m-%d %H:%M:%S")
        )

        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)

        report_file = os.path.join(self.output_dir, f"webslayer_report_{int(time.time())}.md")
        with open(report_file, "w") as f:
            f.write(report_content)

        print(f"\nScan completed! Report saved to: {report_file}")

if __name__ == "__main__":
    WebSlayer().run()
